/*------------------------------------*    #TABLEIZE
\*------------------------------------*/
/**
 * The `.tableize__content` serves as container for cell content. If you need
 * width or padding set on a cell, make sure you set it to `.tableize__content`
 * instead since that is what makes the whole thing work. That being said
 * `.tableize__content` is optional.

   <div class="tableize">
     <div class="tableize__cell">
       <div class="tableize__content">
         cell content
       </div>
     </div>
     <div class="tableize__cell">
       <div class="tableize__content">
         cell content
       </div>
     </div>
   </div>
 */
.tableize {
  display: table;
  width: 100%;
}

/**
     * Tableize cell.
     */
.tableize__cell {
  display: table-cell;
  vertical-align: top;
}

/**
     * Filler cell. There is no need for using this class if parent `.tableize`
     * has `.tableize--fixed` modifier.
     *
     * 1. Fills the rest of the row when one or more cells have fixed width.
     */
.tableize__cell--fill {
  width: 100%;
  /* [1] */
}

/**
     * Middle tableize aligns tableize cell to their middles.
     */
.tableize--middle > .tableize__cell {
  vertical-align: middle;
}

/**
     * Bottom tableize aligns tableize cell to their bottom.
     */
.tableize--bottom > .tableize__cell {
  vertical-align: bottom;
}

/**
     * Fixed tableize makes:
     * - all cells occupy equal width or
     * - if one (or more) cells are fixed (or percentage base) width
     *   the remaining columns will occupy rest of the available space.
     *
     * More info about `table-layout: fixed;` at
     * http://css-tricks.com/fixing-tables-long-strings/
     */
.tableize--fixed {
  table-layout: fixed;
}

/**
     * Full height tableize.
     */
.tableize--full {
  height: 100%;
}

.tableize--full > .tableize__cell,
.tableize--full > .tableize__cell > .tableize__content {
  height: inherit;
}

/* --------------------------------------------------------------------------------------
+
+ JUSTIFIZE
+
-------------------------------------------------------------------------------------- */
/*
    http://www.css-101.org/articles/responsive-boxes/magic-boxes.php

    <div class="justifize">
      <div class="justifize__box">
        justifize box content
      </div>
      <div class="justifize__box">
        justifize box content
      </div>
      <div class="justifize__box">
        justifize box content
      </div>
    </div>
*/
.justifize {
  font-size: 1px;
  /* IE 9, 10, 11 FIX */
  text-align: justify;
}

.justifize:after {
  content: "";
  display: inline-block;
  width: 100%;
}

.justifize__box {
  font-size: 16px;
  font-size: 1rem;
  /* font size for html element MUST be set to 10px for this to work */
  display: inline-block;
  text-align: left;
  vertical-align: middle;
}

.justifize--top .justifize__box {
  vertical-align: top;
}

.justifize--bottom .justifize__box {
  vertical-align: bottom;
}

/*------------------------------------*    #FLAG
\*------------------------------------*/
/**
 * The flag object is a design pattern similar to the media object, however it
 * utilises `display: table[-cell];` to give us control over the vertical
 * alignments of the text and image. csswizardry.com/2013/05/the-flag-object
 */
/**
 * 1. Allows us to control vertical alignments
 * 2. Force the object to be the full width of its parent. Combined with [1],
 *    this makes the object behave in a quasi-`display: block;` manner.
 */
.flag {
  display: table;
  /* [1] */
  width: 100%;
  /* [2] */
}

/**
     * Items within a flag object. There should only ever be one of each.
     *
     * 1. Default to aligning content to their middles.
     */
.flag__img,
.flag__body {
  display: table-cell;
  vertical-align: middle;
  /* [1] */
}

/**
     * Flag images have a space between them and the body of the object.
     */
.flag__img {
  padding-right: 22px;
}

.flag__img > img {
  display: block;
  max-width: none;
}

/**
     * The container for the main content of the flag object.
     *
     * 1. Forces the `.flag__body` to take up all remaining space.
     */
.flag__body {
  width: 100%;
  /* [1] */
}

.flag__body,
.flag__body > :last-child {
  margin-bottom: 0;
}

/**
     * Tiny flags.
     */
.flag--tiny {
  /**
             * Tiny reversed flags.
             */
}

.flag--tiny > .flag__img {
  padding-right: 6px;
}

.flag--tiny.flag--rev > .flag__img {
  padding-right: 0;
  padding-left: 6px;
}

/**
     * Small flags.
     */
.flag--small {
  /**
             * Small reversed flags.
             */
}

.flag--small > .flag__img {
  padding-right: 11px;
}

.flag--small.flag--rev > .flag__img {
  padding-right: 0;
  padding-left: 11px;
}

/**
     * Large flags.
     */
.flag--large {
  /**
             * Large reversed flags.
             */
}

.flag--large > .flag__img {
  padding-right: 44px;
}

.flag--large.flag--rev > .flag__img {
  padding-right: 0;
  padding-left: 44px;
}

/**
     * Huge flags.
     */
.flag--huge {
  /**
             * Huge reversed flags.
             */
}

.flag--huge > .flag__img {
  padding-right: 88px;
}

.flag--huge.flag--rev > .flag__img {
  padding-right: 0;
  padding-left: 88px;
}

/**
     * Reversed flag objects have their image-content to the right, and text-content
     * to the left.
     *
     * 1. Swap the rendered direction of the object…
     * 2. …and reset it.
     * 3. Reassign margins to the correct sides.
     */
.flag--rev {
  direction: rtl;
  /* [1] */
}

.flag--rev > .flag__img,
.flag--rev > .flag__body {
  direction: ltr;
  /* [2] */
}

.flag--rev > .flag__img {
  padding-right: 0;
  /* [3] */
  padding-left: 22px;
  /* [3] */
}

/**
     * Flush flag objects have no space between the image- and text-content.
     */
.flag--flush > .flag__img {
  padding-right: 0;
  padding-left: 0;
}

/**
     * Vertically top aligned flag objects.
     */
.flag--top > .flag__img,
.flag--top > .flag__body {
  vertical-align: top;
}

/**
     * Vertically bottom aligned flag objects.
     */
.flag--bottom > .flag__img,
.flag--bottom > .flag__body {
  vertical-align: bottom;
}

/**
     * Responsive flag objects.
     *
     * There is a very pragmatic, simple implementation of a responsive flag
     * object, which simply places the text-content beneath the image-content.
     *
     * We use a `max-width` media query because:
     *
     * a) it is the least verbose method in terms of amount of code required.
     * b) the flag object’s default state is image-next-to-text, so its stacked
     *    state is the exception, rather than the rule.
     */
@media screen and (max-width: 720px) {
  .flag--responsive {
    /**
                 * Disable reversal of content because there is no concept of
                 * ‘reversed’ in a stacked layout.
                 */
    direction: ltr;
    /**
             * Rework the spacings on regular flag objects.
             */
    /**
                 * Tiny responsive flags.
                 *
                 * Take a little more heavy-handed approach to reworking
                 * spacings on flags that are also tiny flags in their regular
                 * state.
                 */
    /**
                 * Small responsive flags.
                 *
                 * Take a little more heavy-handed approach to reworking
                 * spacings on flags that are also small flags in their regular
                 * state.
                 */
    /**
                 * Large responsive flags.
                 *
                 * Take a little more heavy-handed approach to reworking
                 * spacings on flags that are also large flags in their regular
                 * state.
                 */
    /**
                 * Huge responsive flags.
                 *
                 * Take a little more heavy-handed approach to reworking
                 * spacings on flags that are also huge flags in their regular
                 * state.
                 */
  }
  .flag--responsive,
  .flag--responsive > .flag__img,
  .flag--responsive > .flag__body {
    display: block;
  }
  .flag--responsive > .flag__img {
    padding-right: 0;
    padding-left: 0;
    margin-bottom: 22px;
  }
  .flag--responsive.flag--tiny > .flag__img {
    padding-right: 0;
    padding-left: 0;
    margin-bottom: 6px;
  }
  .flag--responsive.flag--small > .flag__img {
    padding-right: 0;
    padding-left: 0;
    margin-bottom: 11px;
  }
  .flag--responsive.flag--large > .flag__img {
    padding-right: 0;
    padding-left: 0;
    margin-bottom: 44px;
  }
  .flag--responsive.flag--huge > .flag__img {
    padding-right: 0;
    padding-left: 0;
    margin-bottom: 88px;
  }
}

/*------------------------------------*    #MEDIA
\*------------------------------------*/
/**
 * Place any image- and text-like content side-by-side, as per:
 * stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code
 */
.media {
  display: block;
}

.media__img {
  float: left;
  margin-right: 22px;
}

.media__img > img {
  display: block;
}

.media__body {
  overflow: hidden;
  display: block;
}

.media__body,
.media__body > :last-child {
  margin-bottom: 0;
}
